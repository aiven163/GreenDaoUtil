package com.aiven;

import com.aiven.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "ORDER".
 */
public class Order {

    private Long id;
    private String orderNum;
    private Long blong;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient OrderDao myDao;

    private Customer Customer;
    private Long Customer__resolvedKey;


    public Order() {
    }

    public Order(Long id) {
        this.id = id;
    }

    public Order(Long id, String orderNum, Long blong) {
        this.id = id;
        this.orderNum = orderNum;
        this.blong = blong;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getOrderDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getOrderNum() {
        return orderNum;
    }

    public void setOrderNum(String orderNum) {
        this.orderNum = orderNum;
    }

    public Long getBlong() {
        return blong;
    }

    public void setBlong(Long blong) {
        this.blong = blong;
    }

    /** To-one relationship, resolved on first access. */
    public Customer getCustomer() {
        Long __key = this.blong;
        if (Customer__resolvedKey == null || !Customer__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            CustomerDao targetDao = daoSession.getCustomerDao();
            Customer CustomerNew = targetDao.load(__key);
            synchronized (this) {
                Customer = CustomerNew;
            	Customer__resolvedKey = __key;
            }
        }
        return Customer;
    }

    public void setCustomer(Customer Customer) {
        synchronized (this) {
            this.Customer = Customer;
            blong = Customer == null ? null : Customer.getCustId();
            Customer__resolvedKey = blong;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
